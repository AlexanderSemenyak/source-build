parameters:
- name: dotnetMajorVersion
  displayName: Major .NET version being released
  type: string
- name: releaseBranchName
  displayName: Release branch name (e.g. release/8.0.1xx-preview1)
  type: string
- name: isDryRun
  type: boolean
  default: false

stages:
- stage: Mirror
  displayName: Mirror branch to DSP
  dependsOn:
  - PreRelease
  - MirrorApproval

  jobs:
  - job: Mirror
    displayName: Mirror ${{ parameters.releaseBranchName }}
    variables:
    - group: DotNet-Source-Build-All-Orgs-Source-Access
    - name: RepoDir
      value: vmr
    - name: GitUser
      value: dn-bot
    - name: GitEmail
      value: dn-bot@microsoft.com
    - name: sourceUrl
      ${{ if or(eq(parameters.dotnetMajorVersion, '6.0'), eq(parameters.dotnetMajorVersion, '7.0')) }}:
        value: https://dnceng@dev.azure.com/dnceng/internal/_git/security-partners-dotnet
      ${{ else }}:
        value: https://dnceng@dev.azure.com/dnceng/internal/_git/dotnet-dotnet
    - name: destinationUrl
      value: https://dotnet-security-partners@dev.azure.com/dotnet-security-partners/dotnet/_git/dotnet
    - name: sdkVersion
      value: $[ stageDependencies.PreRelease.PreRelease.outputs['ReadReleaseInfo.SdkVersion'] ]

    steps:
    - checkout: none

    - script: |
        set -euo pipefail

        repo_dir="$(Pipeline.Workspace)/$(RepoDir)"
        git init "$repo_dir"
        cd "$repo_dir"

        echo "Setting up git in $repo_dir repo for ${{ variables.sourceUrl }} -> ${{ variables.destinationUrl }}"

        git config --global user.name '${{ variables.GitUser }}'
        git config --global user.email '${{ variables.GitEmail }}'

        source_url=$(echo '${{ variables.sourceUrl }}' | sed "s,https://.*@,https://${{ variables.GitUser }}:${AZDO_PAT}@,g")
        destination_url=$(echo '${{ variables.destinationUrl }}' | sed "s,https://.*@,https://${{ variables.GitUser }}:${AZDO_PAT}@,g")

        git remote add source "${source_url}"
        git remote add destination "${destination_url}"
      displayName: Initialize repository
      env:
        AZDO_PAT: $(dn-bot-all-orgs-build-rw-code-rw)

    - script: |
        if [ ${{ parameters.isDryRun }} = True ]; then
          echo "Doing a dry run, not pushing the branch ${{ parameters.releaseBranchName }} to ${{ variables.destinationUrl }}"
          exit 0
        fi

        set -euxo pipefail

        git fetch source "${{ parameters.releaseBranchName }}"
        git checkout "${{ parameters.releaseBranchName }}"

        tag_name="v$(sdkVersion)-SDK"
        message=".NET Source-build $(sdkVersion)-SDK"
        git tag "$tag_name" HEAD -m "$message"

        git fetch destination '${{ parameters.releaseBranchName }}' || echo 'Branch ${{ parameters.releaseBranchName }} does not exist in destination yet'

        echo "Pushing ${{ parameters.releaseBranchName }} to ${{ variables.destinationUrl }}"
        git push --follow-tags destination "${{ parameters.releaseBranchName }}"
      workingDirectory: $(Pipeline.Workspace)/$(RepoDir)
      displayName: Mirror and tag
